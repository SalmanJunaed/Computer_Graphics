#include<stdio.h>
#include <stdlib.h>
#include<GL/glut.h>

#include <GL/gl.h>




#define SPEED 31.5      //speed of traffic
//#define j 15

float j=-50.0;

float i=0.0;    //movement of car
float n=0.0;    //movement of plane along x-axis
float o=0.0;    //  and y-axis
float c=0.0;    //movement of comet	SS

float lightCounter=0.0;


float m=0.0;    //movement of clouds


int light=1;      //1 for green-light, 0 for red-light
int day=1;        //1 for day ,0 for night
int plane=0;      //1 for plane
int comet=0;      //1 for comet


void draw_pixel(GLint cx, GLint cy)
{

	glBegin(GL_POINTS);
	glVertex2i(cx,cy);
	glEnd();
}

void plotpixels(GLint h,GLint k, GLint x,GLint y)
{
	draw_pixel(x+h,y+k);
	draw_pixel(-x+h,y+k);
	draw_pixel(x+h,-y+k);
	draw_pixel(-x+h,-y+k);
	draw_pixel(y+h,x+k);
	draw_pixel(-y+h,x+k);
	draw_pixel(y+h,-x+k);
	draw_pixel(-y+h,-x+k);
}

void draw_circle(GLint h, GLint k, GLint r)
{
	GLint d=1-r, x=0, y=r;
	while(y>x)
	{
		plotpixels(h,k,x,y);
		if(d<0) d+=2*x+3;
		else
		{
			d+=2*(x-y)+5;
			--y;
		}
		++x;
	}
	plotpixels(h,k,x,y);
}


void draw_object()
{
	int l;
	if(day==1)
	{
		//sky
		glColor3f(0.0,0.9,0.9);
		glBegin(GL_POLYGON);
		glVertex2f(0,450);
		glVertex2f(0,700);
		glVertex2f(1100,700);
		glVertex2f(1100,450);
		glEnd();

		//sun


		for(l=0;l<=35;l++)
		{
			glColor3f(1.0,0.9,0.0);
			draw_circle(100,625,l);
		}


		//plane
		if(plane==1) {
			glColor3f(1.0,1.0,1.0);
			glBegin(GL_POLYGON);
			glVertex2f(925+n,625+o);
			glVertex2f(950+n,640+o);
			glVertex2f(1015+n,640+o);
			glVertex2f(1030+n,650+o);
			glVertex2f(1050+n,650+o);
			glVertex2f(1010+n,625+o);
			glEnd();

			glColor3f(0.8,0.8,0.8);
			glBegin(GL_LINE_LOOP);
			glVertex2f(925+n,625+o);
			glVertex2f(950+n,640+o);
			glVertex2f(1015+n,640+o);
			glVertex2f(1030+n,650+o);
			glVertex2f(1050+n,650+o);
			glVertex2f(1010+n,625+o);
			glEnd();

		}

		//cloud1


		for(l=0;l<=20;l++)
		{
			glColor3f(1.0,1.0,1.0);
			draw_circle(160+m,625,l);

		}


		for(l=0;l<=35;l++)
		{
			glColor3f(1.0,1.0,1.0);
			draw_circle(200+m,625,l);
			draw_circle(225+m,625,l);
		}

		for(l=0;l<=20;l++)
		{
			glColor3f(1.0,1.0,1.0);
			draw_circle(265+m,625,l);
		}

		//cloud2


		for(l=0;l<=20;l++)
		{
			glColor3f(1.0,1.0,1.0);
			draw_circle(270+m,615,l);
		}




		for(l=0;l<=35;l++)
		{

			glColor3f(1.0,1.0,1.0);
			draw_circle(410+m,615,l);
			draw_circle(435+m,615,l);
			draw_circle(470+m,615,l);
		}

		for(l=0;l<=20;l++)
		{
			glColor3f(1.0,1.0,1.0);
			draw_circle(500+m,615,l);
		}






		//grass
		glColor3ub(0, 179, 0);
		glBegin(GL_POLYGON);
		glVertex2f(0,160);
		glVertex2f(0,480);
		glVertex2f(1100,450);
		glVertex2f(1100,160);
		glEnd();

		//pond

		glColor3f(0.0,0.0,0.0);
		glBegin(GL_POLYGON);
		glVertex2f(230,410);
		glVertex2f(250,330);
		glVertex2f(510,330);
		glVertex2f(490,410);
		glEnd();


		glColor3f(0.0,0.9,0.9);
		glBegin(GL_POLYGON);
		glVertex2f(245,400);
		glVertex2f(260,340);
		glVertex2f(495,340);
		glVertex2f(480,400);
		glEnd();

		//hill

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(0,480);
		glVertex2f(0,580);
		glVertex2f(60,478);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(0,480);
		glVertex2f(60,580);
		glVertex2f(120,478);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(40,479);
		glVertex2f(100,630);
		glVertex2f(157,475);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(70,480);
		glVertex2f(140,600);
		glVertex2f(180,478);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(120,477);
		glVertex2f(200,650);
		glVertex2f(290,471);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(210,474);
		glVertex2f(280,620);
		glVertex2f(360,469);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(330,469);
		glVertex2f(440,600);
		glVertex2f(520,465);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(400,469);
		glVertex2f(480,580);
		glVertex2f(540,465);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(500,465);
		glVertex2f(580,600);
		glVertex2f(640,460);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(800,457);
		glVertex2f(1000,600);
		glVertex2f(1050,450);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(950,453);
		glVertex2f(1060,600);
		glVertex2f(1120,450);
		glEnd();

		glColor3ub(134, 89, 45);
		glBegin(GL_POLYGON);
		glVertex2f(1050,453);
		glVertex2f(1115,600);
		glVertex2f(1190,450);
		glEnd();

		
	//building
	glColor3f(0.0,0.2,0.2);
	glBegin(GL_POLYGON);
	glVertex2f(580,355);
	glVertex2f(580,550);
	glVertex2f(670,540);
	glVertex2f(670,345);
	glEnd();


	glColor3f(1.0,0.2,0.2);
	glBegin(GL_POLYGON);
	glVertex2f(670,345);
	glVertex2f(670,540);
	glVertex2f(710,555);
	glVertex2f(710,360);
	glEnd();

	glColor3f(0.0,0.2,0.2);
	glBegin(GL_POLYGON);
	glVertex2f(673,348);
	glVertex2f(673,537);
	glVertex2f(707,552);
	glVertex2f(707,363);
	glEnd();

	glColor3ub(255, 26, 26);
	glBegin(GL_POLYGON);
	glVertex2f(580,550);
	glVertex2f(620,565);
	glVertex2f(710,555);
	glVertex2f(670,540);
	glEnd();

	
	//window
	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(680,360);
	glVertex2f(680,390);
	glVertex2f(700,398);
	glVertex2f(700,368);
	glEnd();
	
	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(680,405);
	glVertex2f(680,435);
	glVertex2f(700,443);
	glVertex2f(700,413);
	glEnd();
	
	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(680,455);
	glVertex2f(680,485);
	glVertex2f(700,493);
	glVertex2f(700,463);
	glEnd();
	
	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(680,505);
	glVertex2f(680,535);
	glVertex2f(700,543);
	glVertex2f(700,513);
	glEnd();
	
	//w2

	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(590,365);
	glVertex2f(590,395);
	glVertex2f(620,392);
	glVertex2f(620,362);
	glEnd();
	
	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(590,410);
	glVertex2f(590,440);
	glVertex2f(620,437);
	glVertex2f(620,407);
	glEnd();

	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(590,455);
	glVertex2f(590,485);
	glVertex2f(620,482);
	glVertex2f(620,452);
	glEnd();

	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(590,500);
	glVertex2f(590,530);
	glVertex2f(620,527);
	glVertex2f(620,497);
	glEnd();


	
	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(630,361);
	glVertex2f(630,391);
	glVertex2f(660,388);
	glVertex2f(660,358);
	glEnd();

	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(630,406);
	glVertex2f(630,436);
	glVertex2f(660,433);
	glVertex2f(660,403);
	glEnd();

	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(630,451);
	glVertex2f(630,481);
	glVertex2f(660,478);
	glVertex2f(660,448);
	glEnd();

	glColor3ub(102, 102, 255);
	glBegin(GL_POLYGON);
	glVertex2f(630,496);
	glVertex2f(630,526);
	glVertex2f(660,523);
	glVertex2f(660,493);
	glEnd();

		



	} else {

		

		//sky
		glColor3f(0.0,0.0,0.0);
		glBegin(GL_POLYGON);
		glVertex2f(0,450);
		glVertex2f(0,700);
		glVertex2f(1100,700);
		glVertex2f(1100,450);
		glEnd();

		//moon
		int l;

		for(l=0;l<=35;l++)
		{
			glColor3f(1.0,1.0,1.0);
			draw_circle(100,625,l);
		}

		//star1

		glColor3f(1.0,1.0,1.0);
		glBegin(GL_TRIANGLES);
		glVertex2f(575,653);
		glVertex2f(570,645);
		glVertex2f(580,645);
		glVertex2f(575,642);
		glVertex2f(570,650);
		glVertex2f(580,650);
		glEnd();

		//star2
		glColor3f(1.0,1.0,1.0);
		glBegin(GL_TRIANGLES);
		glVertex2f(975,643);
		glVertex2f(970,635);
		glVertex2f(980,635);
		glVertex2f(975,632);
		glVertex2f(970,640);
		glVertex2f(980,640);
		glEnd();

		//star3
		glColor3f(1.0,1.0,1.0);
		glBegin(GL_TRIANGLES);
		glVertex2f(875,543);
		glVertex2f(870,535);
		glVertex2f(880,535);
		glVertex2f(875,532);
		glVertex2f(870,540);
		glVertex2f(880,540);
		glEnd();

		//star4
		glColor3f(1.0,1.0,1.0);
		glBegin(GL_TRIANGLES);
		glVertex2f(375,598);
		glVertex2f(370,590);
		glVertex2f(380,590);
		glVertex2f(375,587);
		glVertex2f(370,595);
		glVertex2f(380,595);
		glEnd();

		//star5
		glColor3f(1.0,1.0,1.0);
		glBegin(GL_TRIANGLES);
		glVertex2f(750,628);
		glVertex2f(745,620);
		glVertex2f(755,620);
		glVertex2f(750,618);
		glVertex2f(745,625);
		glVertex2f(755,625);
		glEnd();

		//star6
		glColor3f(1.0,1.0,1.0);
		glBegin(GL_TRIANGLES);
		glVertex2f(200,628);
		glVertex2f(195,620);
		glVertex2f(205,620);
		glVertex2f(200,618);
		glVertex2f(195,625);
		glVertex2f(205,625);
		glEnd();

		//star7
		glColor3f(1.0,1.0,1.0);
		glBegin(GL_TRIANGLES);
		glVertex2f(500,543);
		glVertex2f(495,535);
		glVertex2f(505,535);
		glVertex2f(500,532);
		glVertex2f(495,540);
		glVertex2f(505,540);
		glEnd();


		//comet
		if(comet==1)
		{
			for(l=0;l<=7;l++)
			{
				glColor3f(1.0,1.0,1.0);
				draw_circle(300+c,675,l);
			}

			glColor3f(1.0,1.0,1.0);
			glBegin(GL_TRIANGLES);
			glVertex2f(200+c,675);
			glVertex2f(300+c,682);
			glVertex2f(300+c,668);
			glEnd();
		}

		//Plane
		if(plane==1)
		{

			for(l=0;l<=1;l++)
			{
				glColor3f(1.0,0.0,0.0);
				draw_circle(950+n,625+o,l);
				glColor3f(1.0,1.0,0.0);
				draw_circle(954+n,623+o,l);

			}


		}

		//grass
		glColor3ub(0, 179, 0);
		glBegin(GL_POLYGON);
		glVertex2f(0,160);
		glVertex2f(0,480);
		glVertex2f(1100,450);
		glVertex2f(1100,160);
		glEnd();

		//pond
		glColor3f(0.0,0.0,0.0);
		glBegin(GL_POLYGON);
		glVertex2f(230,410);
		glVertex2f(250,330);
		glVertex2f(510,330);
		glVertex2f(490,410);
		glEnd();


		glColor3f(0.0,0.0,0.4);
		glBegin(GL_POLYGON);
		glVertex2f(245,400);
		glVertex2f(260,340);
		glVertex2f(495,340);
		glVertex2f(480,400);
		glEnd();


		//hill

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(0,480);
		glVertex2f(0,580);
		glVertex2f(60,478);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(0,480);
		glVertex2f(60,580);
		glVertex2f(120,478);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(40,479);
		glVertex2f(100,630);
		glVertex2f(157,475);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(70,480);
		glVertex2f(140,600);
		glVertex2f(180,478);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(120,477);
		glVertex2f(200,650);
		glVertex2f(290,471);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(210,474);
		glVertex2f(280,620);
		glVertex2f(360,469);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(330,469);
		glVertex2f(440,600);
		glVertex2f(520,465);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(400,469);
		glVertex2f(480,580);
		glVertex2f(540,465);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(500,465);
		glVertex2f(580,600);
		glVertex2f(640,460);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(800,457);
		glVertex2f(1000,600);
		glVertex2f(1050,450);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(950,453);
		glVertex2f(1060,600);
		glVertex2f(1120,450);
		glEnd();

		glColor3ub(58, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(1050,453);
		glVertex2f(1115,600);
		glVertex2f(1190,450);
		glEnd();


		
	//building
	glColor3f(0.0,0.2,0.2);
	glBegin(GL_POLYGON);
	glVertex2f(580,355);
	glVertex2f(580,550);
	glVertex2f(670,540);
	glVertex2f(670,345);
	glEnd();


	glColor3f(1.0,0.2,0.2);
	glBegin(GL_POLYGON);
	glVertex2f(670,345);
	glVertex2f(670,540);
	glVertex2f(710,555);
	glVertex2f(710,360);
	glEnd();

	glColor3f(0.0,0.2,0.2);
	glBegin(GL_POLYGON);
	glVertex2f(673,348);
	glVertex2f(673,537);
	glVertex2f(707,552);
	glVertex2f(707,363);
	glEnd();

	glColor3ub(255, 26, 26);
	glBegin(GL_POLYGON);
	glVertex2f(580,550);
	glVertex2f(620,565);
	glVertex2f(710,555);
	glVertex2f(670,540);
	glEnd();

	
	//window
	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(680,360);
	glVertex2f(680,390);
	glVertex2f(700,398);
	glVertex2f(700,368);
	glEnd();
	
	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(680,405);
	glVertex2f(680,435);
	glVertex2f(700,443);
	glVertex2f(700,413);
	glEnd();
	
	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(680,455);
	glVertex2f(680,485);
	glVertex2f(700,493);
	glVertex2f(700,463);
	glEnd();
	
	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(680,505);
	glVertex2f(680,535);
	glVertex2f(700,543);
	glVertex2f(700,513);
	glEnd();
	
	//w2

	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(590,365);
	glVertex2f(590,395);
	glVertex2f(620,392);
	glVertex2f(620,362);
	glEnd();
	
	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(590,410);
	glVertex2f(590,440);
	glVertex2f(620,437);
	glVertex2f(620,407);
	glEnd();

	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(590,455);
	glVertex2f(590,485);
	glVertex2f(620,482);
	glVertex2f(620,452);
	glEnd();

	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(590,500);
	glVertex2f(590,530);
	glVertex2f(620,527);
	glVertex2f(620,497);
	glEnd();


	
	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(630,361);
	glVertex2f(630,391);
	glVertex2f(660,388);
	glVertex2f(660,358);
	glEnd();

	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(630,406);
	glVertex2f(630,436);
	glVertex2f(660,433);
	glVertex2f(660,403);
	glEnd();

	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(630,451);
	glVertex2f(630,481);
	glVertex2f(660,478);
	glVertex2f(660,448);
	glEnd();

	glColor3ub(179, 179, 0);
	glBegin(GL_POLYGON);
	glVertex2f(630,496);
	glVertex2f(630,526);
	glVertex2f(660,523);
	glVertex2f(660,493);
	glEnd();


	

	}                                  //end of day/night


	//tree3
	glColor3ub(134, 89, 45);
	glBegin(GL_POLYGON);
	glVertex2f(950,220);
	glVertex2f(950,310);
	glVertex2f(960,310);
	glVertex2f(960,220);
	glEnd();

	for(l=0;l<=30;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(940,335,l);
		draw_circle(970,335,l);
	}



	for(l=0;l<=25;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(945,375,l);
		draw_circle(965,375,l);
	}

	for(l=0;l<=20;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(955,400,l);
	}

	//road boundary
	glColor3ub(194, 214, 214);
	glBegin(GL_POLYGON);
	glVertex2f(0,240);
	glVertex2f(0,250);
	glVertex2f(960,250);
	glVertex2f(960,240);
	glEnd();

	glColor3ub(194, 214, 214);
	glBegin(GL_POLYGON);
	glVertex2f(0,270);
	glVertex2f(0,280);
	glVertex2f(980,280);
	glVertex2f(980,270);
	glEnd();

	glColor3ub(133, 173, 173);
	glBegin(GL_POLYGON);
	glVertex2f(10,100);
	glVertex2f(10,300);
	glVertex2f(20,300);
	glVertex2f(20,100);
	glEnd();

	glColor3ub(133, 173, 173);
	glBegin(GL_POLYGON);
	glVertex2f(150,100);
	glVertex2f(150,300);
	glVertex2f(160,300);
	glVertex2f(160,100);
	glEnd();

	glColor3ub(133, 173, 173);
	glBegin(GL_POLYGON);
	glVertex2f(300,100);
	glVertex2f(300,300);
	glVertex2f(310,300);
	glVertex2f(310,100);
	glEnd();

	glColor3ub(133, 173, 173);
	glBegin(GL_POLYGON);
	glVertex2f(450,100);
	glVertex2f(450,300);
	glVertex2f(460,300);
	glVertex2f(460,100);
	glEnd();

	glColor3ub(133, 173, 173);
	glBegin(GL_POLYGON);
	glVertex2f(600,100);
	glVertex2f(600,300);
	glVertex2f(610,300);
	glVertex2f(610,100);
	glEnd();

	glColor3ub(133, 173, 173);
	glBegin(GL_POLYGON);
	glVertex2f(750,100);
	glVertex2f(750,300);
	glVertex2f(760,300);
	glVertex2f(760,100);
	glEnd();

	glColor3ub(133, 173, 173);
	glBegin(GL_POLYGON);
	glVertex2f(900,100);
	glVertex2f(900,300);
	glVertex2f(910,300);
	glVertex2f(910,100);
	glEnd();


	/*glColor3ub(133, 173, 173);
	glBegin(GL_POLYGON);
	glVertex2f(1040,100);
	glVertex2f(1040,300);
	glVertex2f(1050,300);
	glVertex2f(1050,100);
	glEnd();
*/


	//road
	glColor3f(0.2,0.2,0.2);
	glBegin(GL_POLYGON);
	glVertex2f(0,0);
	glVertex2f(0,230);
	glVertex2f(1500,230);
	glVertex2f(1500,0);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(0,210);
	glVertex2f(0,215);
	glVertex2f(1500,215);
	glVertex2f(1500,210);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(0,10);
	glVertex2f(0,15);
	glVertex2f(1500,15);
	glVertex2f(1500,10);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(0,115);
	glVertex2f(0,122);
	glVertex2f(100,122);
	glVertex2f(100,115);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(200,115);
	glVertex2f(200,122);
	glVertex2f(350,122);
	glVertex2f(350,115);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(450,115);
	glVertex2f(450,122);
	glVertex2f(600,122);
	glVertex2f(600,115);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(700,115);
	glVertex2f(700,122);
	glVertex2f(850,122);
	glVertex2f(850,115);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(950,115);
	glVertex2f(950,122);
	glVertex2f(1100,122);
	glVertex2f(1100,115);
	glEnd();

	//train er khamba

		glColor3ub(153, 153, 102);
		glBegin(GL_POLYGON);
		glVertex2f(990,440);
		glVertex2f(990,520);
		glVertex2f(1000,520);
		glVertex2f(1000,440);
		glEnd();
		
		glColor3ub(153, 153, 102);
		glBegin(GL_POLYGON);
		glVertex2f(1095,440);
		glVertex2f(1095,520);
		glVertex2f(1105,520);
		glVertex2f(1105,440);
		glEnd();

		glColor3ub(153, 153, 102);
		glBegin(GL_POLYGON);
		glVertex2f(1000,510);
		glVertex2f(1000,520);
		glVertex2f(1095,520);
		glVertex2f(1095,510);
		glEnd();

		
		glColor3ub(31, 31, 20);
		glBegin(GL_POLYGON);
		glVertex2f(1000,440);
		glVertex2f(1000,510);
		glVertex2f(1095,510);
		glVertex2f(1095,440);
		glEnd();
	

	//train_Line
		glColor3ub(153, 153, 102);
		glBegin(GL_POLYGON);
		glVertex2f(995,0);
		glVertex2f(1010,450);
		glVertex2f(1012,450);
		glVertex2f(1005,0);
		glEnd();

		glColor3ub(153, 153, 102);
		glBegin(GL_POLYGON);
		glVertex2f(1100,0);
		glVertex2f(1085,450);
		glVertex2f(1087,450);
		glVertex2f(1110,0);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(985,20);
		glVertex2f(985,30);
		glVertex2f(1110,30);
		glVertex2f(1110,20);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(988,60);
		glVertex2f(988,70);
		glVertex2f(1105,70);
		glVertex2f(1105,60);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(991,100);
		glVertex2f(991,110);
		glVertex2f(1102,110);
		glVertex2f(1102,100);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(993,140);
		glVertex2f(993,150);
		glVertex2f(1100,150);
		glVertex2f(1100,140);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(995,180);
		glVertex2f(995,190);
		glVertex2f(1098,190);
		glVertex2f(1098,180);
		glEnd();


		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(997,220);
		glVertex2f(997,228);
		glVertex2f(1098,228);
		glVertex2f(1098,220);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(999,260);
		glVertex2f(999,268);
		glVertex2f(1098,268);
		glVertex2f(1098,260);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(1001,300);
		glVertex2f(1001,308);
		glVertex2f(1098,308);
		glVertex2f(1098,300);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(1003,335);
		glVertex2f(1003,343);
		glVertex2f(1096,343);
		glVertex2f(1096,335);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(1005,370);
		glVertex2f(1005,378);
		glVertex2f(1094,378);
		glVertex2f(1094,370);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(1006,400);
		glVertex2f(1006,408);
		glVertex2f(1092,408);
		glVertex2f(1092,400);
		glEnd();

		glColor3ub(122, 122, 82);
		glBegin(GL_POLYGON);
		glVertex2f(1007,430);
		glVertex2f(1007,438);
		glVertex2f(1091,438);
		glVertex2f(1091,430);
		glEnd();
	

	//tree1
	glColor3ub(134, 89, 45);
	glBegin(GL_POLYGON);
	glVertex2f(55,325);
	glVertex2f(55,395);
	glVertex2f(65,395);
	glVertex2f(65,325);
	glEnd();


	for(l=0;l<=30;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(45,400,l);
		draw_circle(75,400,l);
	}

	for(l=0;l<=25;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(50,440,l);
		draw_circle(70,440,l);
	}

	for(l=0;l<=20;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(60,465,l);
	}


	//tree2
	glColor3ub(134, 89, 45);
	glBegin(GL_POLYGON);
	glVertex2f(135,325);
	glVertex2f(135,395);
	glVertex2f(145,395);
	glVertex2f(145,325);
	glEnd();

	for(l=0;l<=30;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(125,400,l);
		draw_circle(155,400,l);
	}

	for(l=0;l<=25;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(125,440,l);
		draw_circle(155,440,l);
	}

	for(l=0;l<=20;l++)
	{
		glColor3f(0.0,0.5,0.0);
		draw_circle(140,465,l);
	}


	
	
	

	

		//signal
		glColor3ub(111, 111, 42);
		glBegin(GL_POLYGON);
		glVertex2f(860,220);
		glVertex2f(860,350);
		glVertex2f(870,350);
		glVertex2f(870,220);
		glEnd();


		glColor3f(0.7,0.7,0.7);
		glBegin(GL_POLYGON);
		glVertex2f(840,350);
		glVertex2f(840,500);
		glVertex2f(890,500);
		glVertex2f(890,350);
		glEnd();

		for(l=0;l<=20;l++)
		{
			glColor3f(0.0,0.0,0.0);
			draw_circle(865,475,l);
			glColor3f(1.0,1.0,0.0);
			draw_circle(865,425,l);
			glColor3f(0.0,0.0,0.0);
			draw_circle(865,375,l);
		}

		//car 1
		glColor3ub(139, 0, 139);
		glBegin(GL_POLYGON);
		glVertex2f(25+i,30);
		glVertex2f(25+i,75);
		glVertex2f(75+i,130);
		glVertex2f(175+i,130);
		glVertex2f(200+i,75);
		glVertex2f(250+i,68);
		glVertex2f(250+i,35);
		glEnd();


		//windows
		glColor3f(0.1,0.1,0.1);
		glBegin(GL_POLYGON);
		glVertex2f(35+i,75);
		glVertex2f(80+i,125);
		glVertex2f(115+i,125);
		glVertex2f(115+i,75);
		glEnd();

		glColor3f(0.1,0.1,0.1);
		glBegin(GL_POLYGON);
		glVertex2f(125+i,75);
		glVertex2f(125+i,125);
		glVertex2f(170+i,125);
		glVertex2f(190+i,75);
		glEnd();


		for(l=0;l<20;l++)
		{
			glColor3f(0.0,0.0,0.0);
			draw_circle(75+i,30,l);
			draw_circle(175+i,30,l);
		}

		for(l=0;l<10;l++)
		{
			glColor3ub(255,255,0);
			draw_circle(75+i,30,l);
			draw_circle(175+i,30,l);
		}




		//car2

		glColor3ub(255, 69, 0);
		glBegin(GL_POLYGON);
		glVertex2f(-372+i,30);
		//glVertex2f(-470+i,112);
		//glVertex2f(-400+i,125);
		glVertex2f(-372+i,130);
		glVertex2f(-210+i,130);
		glVertex2f(-180+i,75);
		glVertex2f(-135+i,75);
		glVertex2f(-110+i,30);
		glEnd();


		//windows
		glColor3f(0.1,0.1,0.1);
		glBegin(GL_POLYGON);
		glVertex2f(-364+i,70);
		glVertex2f(-364+i,120);
		glVertex2f(-300+i,120);
		glVertex2f(-300+i,70);
		glEnd();

		glColor3f(0.1,0.1,0.1);
		glBegin(GL_POLYGON);
		glVertex2f(-290+i,70);
		glVertex2f(-290+i,120);
		glVertex2f(-217+i,120);
		glVertex2f(-192+i,70);
		glEnd();


		for(l=0;l<20;l++)
		{
			glColor3f(0.0,0.0,0.0);
			draw_circle(-350+i,30,l);
			draw_circle(-200+i,30,l);
		}

		for(l=0;l<10;l++)
		{
			glColor3f(1.0,0.0,0.0);
			draw_circle(-350+i,30,l);
			draw_circle(-200+i,30,l);
		}

		//bus

		/*glColor3ub(30, 144, 255);
		glBegin(GL_POLYGON);
		glVertex2f(350+i,50);
		glVertex2f(350+i,275);
		glVertex2f(722+i,275);
		glVertex2f(750+i,175);
		glVertex2f(750+i,50);
		glEnd();



		glColor3ub(255, 255, 0);
		glBegin(GL_POLYGON);
		glVertex2f(650+i,175);
		glVertex2f(650+i,260);
		glVertex2f(720+i,260);
		glVertex2f(745+i,175);
		glEnd();



		glColor3ub(255, 255, 0);
		glBegin(GL_POLYGON);
		glVertex2f(550+i,175);
		glVertex2f(550+i,260);
		glVertex2f(625+i,260);
		glVertex2f(625+i,175);
		glEnd();


		glColor3ub(255, 255, 0);
		glBegin(GL_POLYGON);
		glVertex2f(450+i,175);
		glVertex2f(450+i,260);
		glVertex2f(525+i,260);
		glVertex2f(525+i,175);
		glEnd();


		glColor3ub(255, 255, 0);
		glBegin(GL_POLYGON);
		glVertex2f(375+i,175);
		glVertex2f(375+i,260);
		glVertex2f(425+i,260);
		glVertex2f(425+i,175);
		glEnd();

		for(l=0;l<30;l++)
		{
			glColor3f(0.0,0.0,0.0);
			draw_circle(450+i,50,l);
			draw_circle(625+i,50,l);
		}

		for(l=0;l<20;l++)
		{
			glColor3ub(255, 0, 191);
			draw_circle(450+i,50,l);
			draw_circle(625+i,50,l);
		}*/



		
		
		//train //x,y value change hobe
		
		if(light==0){
		/*glColor3f(1.0,1.0,0.0);
		glBegin(GL_POLYGON);
		glVertex2f(1005,0+j);
		glVertex2f(1005,150+j);
		glVertex2f(1098,150+j);
		glVertex2f(1098,0+j);
		glEnd();*/


		glColor3ub(153, 51, 0);
		glBegin(GL_POLYGON);
		glVertex2f(1005,0+j);
		glVertex2f(1005,150+j);
		glVertex2f(1020,200+j);
		glVertex2f(1020,40+j);
		glEnd();

		/*glColor3ub(255, 0, 0);
		glBegin(GL_POLYGON);
		glVertex2f(1005,0+j);
		glVertex2f(1005,150+j);
		glVertex2f(1011,173+j);
		glVertex2f(1011,18+j);
		glEnd();*/

		glColor3ub(57, 38, 19);
		glBegin(GL_POLYGON);
		glVertex2f(1020,40+j);
		glVertex2f(1020,200+j);
		glVertex2f(1097.5,200+j);
		glVertex2f(1096.5,40+j);
		glEnd();


		glColor3ub(128, 26, 0);
		glBegin(GL_POLYGON);
		glVertex2f(1005,0+j);
		glVertex2f(1020,40+j);
		glVertex2f(1096.5,40+j);
		glVertex2f(1097.5,0+j);
		glEnd();

		/*glColor3ub(255, 51, 51);
		glBegin(GL_POLYGON);
		glVertex2f(1005,0+j);
		glVertex2f(1011,18+j);
		glVertex2f(1096.5,18+j);
		glVertex2f(1097.5,0+j);
		glEnd();*/

		glColor3ub(51, 0, 0);
		glBegin(GL_POLYGON);
		glVertex2f(1057,190+j);
		glVertex2f(1049,200+j);
		glVertex2f(1049,205+j);
		glVertex2f(1069,205+j);
		glVertex2f(1069,200+j);
		glVertex2f(1061,190+j);
		glEnd();


		if(day==0)
		{
			//train_light

		glColor3ub(255, 255, 51);
		glBegin(GL_POLYGON);
		glVertex2f(1049,205+j);
		glVertex2f(1005,221+j);
		glVertex2f(1093,221+j);
		glVertex2f(1069,205+j);
		glEnd();
		}

		/*glColor3ub(255, 255, 51);
		glBegin(GL_POLYGON);
		glVertex2f(1049,205+j);
		glVertex2f(1005,221+j);
		glVertex2f(1087,223+j);
		glVertex2f(1069,205+j);
		glEnd();*/



		/////////////




		/*glColor3f(1.0,1.0,0.0);
		glBegin(GL_POLYGON);
		glVertex2f(1008,63+j);
		glVertex2f(1025,113+j);
		glVertex2f(1080,113+j);
		glVertex2f(1094,63+j);
		glEnd();

		glColor3f(1.0,1.0,0.0);
		glBegin(GL_POLYGON);
		glVertex2f(1009,116+j);
		glVertex2f(1025,166+j);
		glVertex2f(1080,166+j);
		glVertex2f(1092,116+j);
		glEnd();*/


		++j;
		}

		else
		{
			j=1;
		}


		lightCounter+=0.02;
		if(lightCounter>4.65){
			light=0.0;
			if(lightCounter>10.5){
				light=1.0;
				lightCounter=0.0;
			}
		}

		glFlush();
}



void traffic_light()
{
	int l;
	if(light==1)
	{
		for(l=0;l<=17;l++)
		{

			glColor3f(0.0,0.0,0.0);
			draw_circle(865,475,l);

			//glColor3f(1.0,1.0,0.0);
			//draw_circle(1065,425,l);

			glColor3f(0.0,0.7,0.0);
			draw_circle(865,375,l);
		}
	}

	else
	{

		for(l=0;l<=17;l++)
		{
			glColor3f(1.0,0.0,0.0);
			draw_circle(865,475,l);

			//glColor3f(0.0,0.0,0.0);
			//draw_circle(865,425,l);

			glColor3f(0.0,0.0,0.0);
			draw_circle(865,375,l);
		}
	}
}


void idle()
{

/*
	j += 30.0;
	if(j>2*SPEED)
	{
		j=0.0;
	}

*/


	//glClearColor(1.0,1.0,1.0,1.0);
	//if(light==0 && (i>=330 && i<=750)) //value of i when first vehicle is near the traffic-signal
	//{
	//	
	//	i+=SPEED/10;
	//	
	//	++m;
	//	n-=2;
	//	o+=0.2;
	//	c+=2;

	//	
	//	

	//}

	//if(light==0 && (i>=830 && i<=1100))

	if(light==0 && (i>=830 && i<=1130)) //value of i when second vehicle is near the traffic-signal
	{
		
		i+=SPEED/10;
		++m;
		n-=2;
		o+=0.2;
		c+=2;
		//j++;

	}

	if(light==0 && (i>=1150 && i<=1620))// value of i when third vehicle is near the traffic signal
	{
		
		i+=SPEED/10;
		++m;
		n-=2;
		o+=0.2;
		c+=2;
		//j++;

	}

	if(light==0)
	{
		
		i=i;
		++m;
		n-=2;
		o+=0.2;
		c+=2;
		//j++;

	}

	else
	{
		
		i+=SPEED/10;
		++m;
		n-=2;
		o+=0.2;
		c+=2;
	}
	int CarCounter=0;

	if(i>1630){
		i=0.0;
		CarCounter+=2;


	}// i x 3 == carCount.
 	if(m>1100)
		m=0.0;

	if(j>320)
		j=0.0;

	if( o>75)
	{
		plane=0;
	}
	if(c>500)
	{
		comet=0;
	}


	glutPostRedisplay();




}



void mouse(int btn,int state,int x,int y)
{
	if(btn==GLUT_LEFT_BUTTON && state==GLUT_DOWN)
		exit(0);
}


void keyboardFunc( unsigned char key, int x, int y )
{
	switch( key )
	{
	/*case 'g':
	case 'G':
		light=1;
		break;

	case 'r':
	case 'R':
		light=0;
		break;*/

	case 'd':
	case 'D':
		day=1;
		break;

	case 'n':
	case 'N':
		day=0;
		break;

	};

}






void main_menu(int index)
{
	switch(index)
	{
	case 1:
		if(index==1)
		{
			plane=1;
			o=n=0.0;
		}
		break;

	case 2:
		if(index==2)
		{
			comet=1;
			c=0.0;
		}
		break;
	}
}





void myinit()
{
	glClearColor(1.0,1.0,1.0,1.0);
	glColor3f(0.0,0.0,1.0);
	glPointSize(2.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0,1100.0,0.0,700.0);
}



void display()
{

	glClear(GL_COLOR_BUFFER_BIT);
	draw_object();
	traffic_light();
	glFlush();
}


int main(int argc,char** argv)
{
	int c_menu;
	printf("Press 'r' or 'R' to change the signal light to red \n");
	printf("Press 'g' or 'G' to change the signal light to green \n");

	printf("Press 'd' or 'D' to make it day \n");
	printf("Press 'n' or 'N' to make it night \n");

	printf("Press RIGHT MOUSE BUTTON to display menu \n");
	printf("Press LEFT MOUSE BUTTON to quit the program \n");

	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowSize(1100.0,700.0);
	glutInitWindowPosition(0,0);
	glutCreateWindow("Advance Traffic Signal");
	glutDisplayFunc(display);
	glutIdleFunc(idle);
	glutKeyboardFunc(keyboardFunc);
	glutMouseFunc(mouse);
	myinit();

	c_menu=glutCreateMenu(main_menu);
	glutAddMenuEntry("Aeroplane",1);
	//glutAddMenuEntry("Comet",2);
	glutAttachMenu(GLUT_RIGHT_BUTTON);

	glutMainLoop();
	return 0;
}

